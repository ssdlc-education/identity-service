<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTd Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.yahoo.identity.services.storage.sql.AccountMapper">
    <insert id="insertAccount" parameterType="AccountModel" keyProperty="account.username" useGeneratedKeys="false">
        INSERT INTO `account` (`username`, `first_name`, `last_name`, `email`, `email_status`, `password_hash`,
        `password_salt`, `create_ts`, `update_ts`, `description`, `block_until_ts`, `consecutive_fails`)
        VALUES (
        #{account.username, jdbcType=VARCHAR},
        #{account.firstName, jdbcType=VARCHAR},
        #{account.lastName, jdbcType=VARCHAR},
        #{account.email, jdbcType=VARCHAR},
        #{account.emailStatus, jdbcType=TINYINT},
        #{account.passwordHash, jdbcType=VARBINARY},
        #{account.passwordSalt, jdbcType=VARBINARY},
        #{account.createTs, jdbcType=BIGINT},
        #{account.updateTs, jdbcType=BIGINT},
        #{account.description, jdbcType=VARCHAR},
        #{account.blockUntilTs, jdbcType=BIGINT},
        #{account.consecutiveFails, jdbcType=INTEGER}
        )
    </insert>

    <resultMap id="accountResultMap" type="AccountModel">
        <id property="uid" column="uid"/>
        <result property="username" column="username"/>
        <result property="firstName" column="first_name"/>
        <result property="lastName" column="last_name"/>
        <result property="email" column="email"/>
        <result property="emailStatus" column="email_status"/>
        <result property="passwordHash" column="password_hash"/>
        <result property="passwordSalt" column="password_salt"/>
        <result property="createTs" column="create_ts"/>
        <result property="updateTs" column="update_ts"/>
        <result property="description" column="description"/>
        <result property="blockUntilTs" column="block_until_ts"/>
        <result property="consecutiveFails" column="consecutive_fails"/>
    </resultMap>


    <resultMap id="publicAccountResultMap" type="AccountModel">
        <id property="uid" column="uid"/>
        <result property="username" column="username"/>
        <result property="description" column="description"/>
    </resultMap>


    <select id="getAccount" resultMap="accountResultMap">
        SELECT uid, username, first_name, last_name, email, email_status, password_hash, password_salt, create_ts,
        update_ts, description, block_until_ts, consecutive_fails FROM account
        WHERE username = #{username}
    </select>

    <select id="getPublicAccount" resultMap="publicAccountResultMap">
        SELECT uid, username, description FROM account
        WHERE username = #{username}
    </select>

    <update id="updateAccount" parameterType="AccountModel" keyProperty="account.username" useGeneratedKeys="false">
        Update `account` SET
        <if test="account.email != null">
            `email` = #{account.email, jdbcType=VARCHAR},
        </if>
        <if test="account.emailStatus != null">
            `email_status` = #{account.emailStatus, jdbcType=TINYINT},
        </if>
        <if test="account.passwordHash != null">
            `password_hash` = #{account.passwordHash, jdbcType=VARBINARY},
        </if>
        <if test="account.passwordSalt != null">
            `password_salt` = #{account.passwordSalt, jdbcType=VARBINARY},
        </if>
        <if test="account.updateTs != null">
            `update_ts` = #{account.updateTs, jdbcType=BIGINT},
        </if>
        <if test="account.description != null">
            `description` = #{account.description, jdbcType=VARCHAR},
        </if>
        <if test="account.blockUntilTs != null">
            `block_until_ts` = #{account.blockUntilTs, jdbcType=BIGINT},
        </if>
        <if test="account.consecutiveFails != null">
            `consecutive_fails` = #{account.consecutiveFails, jdbcType=INTEGER}
        </if>
        WHERE
        `username` = #{account.username, jdbcType=VARCHAR}
    </update>
</mapper>